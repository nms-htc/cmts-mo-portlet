/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cmcti.cmts.domain.model.impl;

import com.cmcti.cmts.domain.model.Merchant;
import com.cmcti.cmts.domain.model.MerchantModel;
import com.cmcti.cmts.domain.model.MerchantSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Merchant service. Represents a row in the &quot;CMTS_Merchant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cmcti.cmts.domain.model.MerchantModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MerchantImpl}.
 * </p>
 *
 * @author richard
 * @see MerchantImpl
 * @see com.cmcti.cmts.domain.model.Merchant
 * @see com.cmcti.cmts.domain.model.MerchantModel
 * @generated
 */
@JSON(strict = true)
public class MerchantModelImpl extends BaseModelImpl<Merchant>
	implements MerchantModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a merchant model instance should use the {@link com.cmcti.cmts.domain.model.Merchant} interface instead.
	 */
	public static final String TABLE_NAME = "CMTS_Merchant";
	public static final Object[][] TABLE_COLUMNS = {
			{ "merchantId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "code_", Types.VARCHAR },
			{ "parentId", Types.BIGINT },
			{ "parentCode", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CMTS_Merchant (merchantId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,code_ VARCHAR(75) null,parentId LONG,parentCode VARCHAR(75) null,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CMTS_Merchant";
	public static final String ORDER_BY_JPQL = " ORDER BY merchant.merchantId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMTS_Merchant.merchantId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cmcti.cmts.domain.model.Merchant"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cmcti.cmts.domain.model.Merchant"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cmcti.cmts.domain.model.Merchant"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long MERCHANTID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Merchant toModel(MerchantSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Merchant model = new MerchantImpl();

		model.setMerchantId(soapModel.getMerchantId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setCode(soapModel.getCode());
		model.setParentId(soapModel.getParentId());
		model.setParentCode(soapModel.getParentCode());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Merchant> toModels(MerchantSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Merchant> models = new ArrayList<Merchant>(soapModels.length);

		for (MerchantSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cmcti.cmts.domain.model.Merchant"));

	public MerchantModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _merchantId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMerchantId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _merchantId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Merchant.class;
	}

	@Override
	public String getModelClassName() {
		return Merchant.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("merchantId", getMerchantId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("code", getCode());
		attributes.put("parentId", getParentId());
		attributes.put("parentCode", getParentCode());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long merchantId = (Long)attributes.get("merchantId");

		if (merchantId != null) {
			setMerchantId(merchantId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		String parentCode = (String)attributes.get("parentCode");

		if (parentCode != null) {
			setParentCode(parentCode);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getMerchantId() {
		return _merchantId;
	}

	@Override
	public void setMerchantId(long merchantId) {
		_merchantId = merchantId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	@JSON
	@Override
	public String getParentCode() {
		if (_parentCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentCode;
		}
	}

	@Override
	public void setParentCode(String parentCode) {
		_parentCode = parentCode;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Merchant.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Merchant toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Merchant)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MerchantImpl merchantImpl = new MerchantImpl();

		merchantImpl.setMerchantId(getMerchantId());
		merchantImpl.setGroupId(getGroupId());
		merchantImpl.setCompanyId(getCompanyId());
		merchantImpl.setUserId(getUserId());
		merchantImpl.setUserName(getUserName());
		merchantImpl.setCreateDate(getCreateDate());
		merchantImpl.setModifiedDate(getModifiedDate());
		merchantImpl.setTitle(getTitle());
		merchantImpl.setCode(getCode());
		merchantImpl.setParentId(getParentId());
		merchantImpl.setParentCode(getParentCode());
		merchantImpl.setDescription(getDescription());

		merchantImpl.resetOriginalValues();

		return merchantImpl;
	}

	@Override
	public int compareTo(Merchant merchant) {
		long primaryKey = merchant.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Merchant)) {
			return false;
		}

		Merchant merchant = (Merchant)obj;

		long primaryKey = merchant.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MerchantModelImpl merchantModelImpl = this;

		merchantModelImpl._originalUserId = merchantModelImpl._userId;

		merchantModelImpl._setOriginalUserId = false;

		merchantModelImpl._originalCode = merchantModelImpl._code;

		merchantModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Merchant> toCacheModel() {
		MerchantCacheModel merchantCacheModel = new MerchantCacheModel();

		merchantCacheModel.merchantId = getMerchantId();

		merchantCacheModel.groupId = getGroupId();

		merchantCacheModel.companyId = getCompanyId();

		merchantCacheModel.userId = getUserId();

		merchantCacheModel.userName = getUserName();

		String userName = merchantCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			merchantCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			merchantCacheModel.createDate = createDate.getTime();
		}
		else {
			merchantCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			merchantCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			merchantCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		merchantCacheModel.title = getTitle();

		String title = merchantCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			merchantCacheModel.title = null;
		}

		merchantCacheModel.code = getCode();

		String code = merchantCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			merchantCacheModel.code = null;
		}

		merchantCacheModel.parentId = getParentId();

		merchantCacheModel.parentCode = getParentCode();

		String parentCode = merchantCacheModel.parentCode;

		if ((parentCode != null) && (parentCode.length() == 0)) {
			merchantCacheModel.parentCode = null;
		}

		merchantCacheModel.description = getDescription();

		String description = merchantCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			merchantCacheModel.description = null;
		}

		return merchantCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{merchantId=");
		sb.append(getMerchantId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", parentCode=");
		sb.append(getParentCode());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.cmcti.cmts.domain.model.Merchant");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>merchantId</column-name><column-value><![CDATA[");
		sb.append(getMerchantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentCode</column-name><column-value><![CDATA[");
		sb.append(getParentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Merchant.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Merchant.class
		};
	private long _merchantId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _title;
	private String _code;
	private String _originalCode;
	private long _parentId;
	private String _parentCode;
	private String _description;
	private long _columnBitmask;
	private Merchant _escapedModel;
}