/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cmcti.cmts.domain.model.impl;

import com.cmcti.cmts.domain.model.UpChannelMetadata;
import com.cmcti.cmts.domain.model.UpChannelMetadataModel;
import com.cmcti.cmts.domain.model.UpChannelMetadataSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UpChannelMetadata service. Represents a row in the &quot;CMTS_UpChannelMetadata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cmcti.cmts.domain.model.UpChannelMetadataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UpChannelMetadataImpl}.
 * </p>
 *
 * @author richard
 * @see UpChannelMetadataImpl
 * @see com.cmcti.cmts.domain.model.UpChannelMetadata
 * @see com.cmcti.cmts.domain.model.UpChannelMetadataModel
 * @generated
 */
@JSON(strict = true)
public class UpChannelMetadataModelImpl extends BaseModelImpl<UpChannelMetadata>
	implements UpChannelMetadataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a up channel metadata model instance should use the {@link com.cmcti.cmts.domain.model.UpChannelMetadata} interface instead.
	 */
	public static final String TABLE_NAME = "CMTS_UpChannelMetadata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "metaId", Types.BIGINT },
			{ "cmtsId", Types.BIGINT },
			{ "ifIndex", Types.INTEGER },
			{ "dsFrequency", Types.VARCHAR },
			{ "dsQam", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CMTS_UpChannelMetadata (metaId LONG not null primary key,cmtsId LONG,ifIndex INTEGER,dsFrequency VARCHAR(75) null,dsQam VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CMTS_UpChannelMetadata";
	public static final String ORDER_BY_JPQL = " ORDER BY upChannelMetadata.metaId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMTS_UpChannelMetadata.metaId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cmcti.cmts.domain.model.UpChannelMetadata"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cmcti.cmts.domain.model.UpChannelMetadata"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cmcti.cmts.domain.model.UpChannelMetadata"),
			true);
	public static long CMTSID_COLUMN_BITMASK = 1L;
	public static long IFINDEX_COLUMN_BITMASK = 2L;
	public static long METAID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UpChannelMetadata toModel(UpChannelMetadataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UpChannelMetadata model = new UpChannelMetadataImpl();

		model.setMetaId(soapModel.getMetaId());
		model.setCmtsId(soapModel.getCmtsId());
		model.setIfIndex(soapModel.getIfIndex());
		model.setDsFrequency(soapModel.getDsFrequency());
		model.setDsQam(soapModel.getDsQam());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UpChannelMetadata> toModels(
		UpChannelMetadataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UpChannelMetadata> models = new ArrayList<UpChannelMetadata>(soapModels.length);

		for (UpChannelMetadataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cmcti.cmts.domain.model.UpChannelMetadata"));

	public UpChannelMetadataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _metaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMetaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _metaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UpChannelMetadata.class;
	}

	@Override
	public String getModelClassName() {
		return UpChannelMetadata.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("metaId", getMetaId());
		attributes.put("cmtsId", getCmtsId());
		attributes.put("ifIndex", getIfIndex());
		attributes.put("dsFrequency", getDsFrequency());
		attributes.put("dsQam", getDsQam());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long metaId = (Long)attributes.get("metaId");

		if (metaId != null) {
			setMetaId(metaId);
		}

		Long cmtsId = (Long)attributes.get("cmtsId");

		if (cmtsId != null) {
			setCmtsId(cmtsId);
		}

		Integer ifIndex = (Integer)attributes.get("ifIndex");

		if (ifIndex != null) {
			setIfIndex(ifIndex);
		}

		String dsFrequency = (String)attributes.get("dsFrequency");

		if (dsFrequency != null) {
			setDsFrequency(dsFrequency);
		}

		String dsQam = (String)attributes.get("dsQam");

		if (dsQam != null) {
			setDsQam(dsQam);
		}
	}

	@JSON
	@Override
	public long getMetaId() {
		return _metaId;
	}

	@Override
	public void setMetaId(long metaId) {
		_metaId = metaId;
	}

	@JSON
	@Override
	public long getCmtsId() {
		return _cmtsId;
	}

	@Override
	public void setCmtsId(long cmtsId) {
		_columnBitmask |= CMTSID_COLUMN_BITMASK;

		if (!_setOriginalCmtsId) {
			_setOriginalCmtsId = true;

			_originalCmtsId = _cmtsId;
		}

		_cmtsId = cmtsId;
	}

	public long getOriginalCmtsId() {
		return _originalCmtsId;
	}

	@JSON
	@Override
	public int getIfIndex() {
		return _ifIndex;
	}

	@Override
	public void setIfIndex(int ifIndex) {
		_columnBitmask |= IFINDEX_COLUMN_BITMASK;

		if (!_setOriginalIfIndex) {
			_setOriginalIfIndex = true;

			_originalIfIndex = _ifIndex;
		}

		_ifIndex = ifIndex;
	}

	public int getOriginalIfIndex() {
		return _originalIfIndex;
	}

	@JSON
	@Override
	public String getDsFrequency() {
		if (_dsFrequency == null) {
			return StringPool.BLANK;
		}
		else {
			return _dsFrequency;
		}
	}

	@Override
	public void setDsFrequency(String dsFrequency) {
		_dsFrequency = dsFrequency;
	}

	@JSON
	@Override
	public String getDsQam() {
		if (_dsQam == null) {
			return StringPool.BLANK;
		}
		else {
			return _dsQam;
		}
	}

	@Override
	public void setDsQam(String dsQam) {
		_dsQam = dsQam;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UpChannelMetadata.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UpChannelMetadata toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UpChannelMetadata)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UpChannelMetadataImpl upChannelMetadataImpl = new UpChannelMetadataImpl();

		upChannelMetadataImpl.setMetaId(getMetaId());
		upChannelMetadataImpl.setCmtsId(getCmtsId());
		upChannelMetadataImpl.setIfIndex(getIfIndex());
		upChannelMetadataImpl.setDsFrequency(getDsFrequency());
		upChannelMetadataImpl.setDsQam(getDsQam());

		upChannelMetadataImpl.resetOriginalValues();

		return upChannelMetadataImpl;
	}

	@Override
	public int compareTo(UpChannelMetadata upChannelMetadata) {
		long primaryKey = upChannelMetadata.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UpChannelMetadata)) {
			return false;
		}

		UpChannelMetadata upChannelMetadata = (UpChannelMetadata)obj;

		long primaryKey = upChannelMetadata.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UpChannelMetadataModelImpl upChannelMetadataModelImpl = this;

		upChannelMetadataModelImpl._originalCmtsId = upChannelMetadataModelImpl._cmtsId;

		upChannelMetadataModelImpl._setOriginalCmtsId = false;

		upChannelMetadataModelImpl._originalIfIndex = upChannelMetadataModelImpl._ifIndex;

		upChannelMetadataModelImpl._setOriginalIfIndex = false;

		upChannelMetadataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UpChannelMetadata> toCacheModel() {
		UpChannelMetadataCacheModel upChannelMetadataCacheModel = new UpChannelMetadataCacheModel();

		upChannelMetadataCacheModel.metaId = getMetaId();

		upChannelMetadataCacheModel.cmtsId = getCmtsId();

		upChannelMetadataCacheModel.ifIndex = getIfIndex();

		upChannelMetadataCacheModel.dsFrequency = getDsFrequency();

		String dsFrequency = upChannelMetadataCacheModel.dsFrequency;

		if ((dsFrequency != null) && (dsFrequency.length() == 0)) {
			upChannelMetadataCacheModel.dsFrequency = null;
		}

		upChannelMetadataCacheModel.dsQam = getDsQam();

		String dsQam = upChannelMetadataCacheModel.dsQam;

		if ((dsQam != null) && (dsQam.length() == 0)) {
			upChannelMetadataCacheModel.dsQam = null;
		}

		return upChannelMetadataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{metaId=");
		sb.append(getMetaId());
		sb.append(", cmtsId=");
		sb.append(getCmtsId());
		sb.append(", ifIndex=");
		sb.append(getIfIndex());
		sb.append(", dsFrequency=");
		sb.append(getDsFrequency());
		sb.append(", dsQam=");
		sb.append(getDsQam());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.cmcti.cmts.domain.model.UpChannelMetadata");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>metaId</column-name><column-value><![CDATA[");
		sb.append(getMetaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cmtsId</column-name><column-value><![CDATA[");
		sb.append(getCmtsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifIndex</column-name><column-value><![CDATA[");
		sb.append(getIfIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dsFrequency</column-name><column-value><![CDATA[");
		sb.append(getDsFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dsQam</column-name><column-value><![CDATA[");
		sb.append(getDsQam());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UpChannelMetadata.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UpChannelMetadata.class
		};
	private long _metaId;
	private long _cmtsId;
	private long _originalCmtsId;
	private boolean _setOriginalCmtsId;
	private int _ifIndex;
	private int _originalIfIndex;
	private boolean _setOriginalIfIndex;
	private String _dsFrequency;
	private String _dsQam;
	private long _columnBitmask;
	private UpChannelMetadata _escapedModel;
}